scalar Long

type Query {
    authCheck: Boolean
    evaluate(code: String!, language: String!, taskId: Int!): CodeResponse!
    me: User!
    module(moduleId: Int!): Module!
    myModules: [Module]!
    programmingTask(taskId: Int!, language: String!): ProgrammingTask!
    availableLanguages: [String]
}

input UserCodeSubmissionInput {
    codeText: String!
    executionTime: Int
    memoryUsage: [Int]
    isSubmitted: Boolean
    hasSharedWithModuleStaff: Boolean
    hasSharedWithStudents: Boolean
    taskId: Int!
    language: String!
}

type Mutation {
    createModule(moduleTitle: String!, moduleDescription: String!): Boolean!
    linkModuleTask(moduleID: ID!, taskID: ID!): Boolean!
    login(email: String!, password: String!): User
    logout: Boolean
    logoutAll: Boolean
    signUp(email: String!, username: String!, password: String!): User
    submitCode(submission: UserCodeSubmissionInput): Boolean
}

type CodeResponse {
    consoleOutput: String
    output: String
    stats: [Stat]!
    errorText: String
    executionTimeMS: Long!
    isSuccessful: Boolean!
}

type Module {
    id: ID!
    title: String!
    description: String!
    tasks: [ProgrammingTask]
    createdBy: User
    completedPct: Float!
    canEdit: Boolean
}

type Stat {
    cpu: String!
    mem: String!
}

type User {
    id: Int
    email: String!
    username: String!
    password: String!
    refreshCount: Int!
    xp: Int!
}

type ProgrammingTask {
    id: ID!
    title: String!
    description: String!
    starterCode: String
    testCode: String
    language: String
    availableLanguages: [String]
    myCode: String
    includedFiles: String
    fileName: String
}

type UserCodeSubmission {
    codeText: String!
    executionTime: Int!
    memoryUsage: [Int]!
    isSubmitted: Boolean!
    hasSharedWithModuleStaff: Boolean!
    hasSharedWithStudents: Boolean!
    createdBy: User!
    task: ProgrammingTask
    language: String!
}